DELIMITER //

CREATE TRIGGER before_insert_detalles_compras
BEFORE INSERT ON tb_detalles_compras
FOR EACH ROW
BEGIN
    DECLARE v_precio_producto DECIMAL(8,2);

    -- Obtener el precio del producto desde tb_productos
    SELECT precio_producto 
    INTO v_precio_producto
    FROM tb_productos
    WHERE id_producto = (SELECT id_producto FROM tb_detalleProducto WHERE id_detalle_producto = NEW.id_detalle_producto);

    -- Asignar el precio del producto al nuevo registro de tb_detalles_compras
    SET NEW.precio_producto = v_precio_producto;
END
//

DELIMITER ;

DELIMITER //

CREATE TRIGGER after_insert_detalles_compras
AFTER INSERT ON tb_detalles_compras
FOR EACH ROW
BEGIN
    DECLARE v_existencias_producto INT;

    -- Obtener las existencias del producto desde tb_detalleProducto
    SELECT existencias_producto 
    INTO v_existencias_producto
    FROM tb_detalleProducto
    WHERE id_detalle_producto = NEW.id_detalle_producto;

    -- Validar que no se haya reducido a un número negativo
    IF (v_existencias_producto - NEW.cantidad_producto) < 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'No hay suficientes existencias para el producto con ID ';
    ELSE
        -- Actualizar las existencias del producto en tb_detalleProducto
        UPDATE tb_detalleProducto
        SET existencias_producto = v_existencias_producto - NEW.cantidad_producto
        WHERE id_detalle_producto = NEW.id_detalle_producto;
    END IF;
END
//

DELIMITER ;

-- Procedimiento para asignar una categoria a un alumno a partir de su edad

DELIMITER //

CREATE PROCEDURE sp_insert_alumno(
    IN p_nombre_alumno VARCHAR(100),
    IN p_apellido_alumno VARCHAR(100),
    IN p_fecha_nacimiento DATE,
    IN p_posicion_alumno ENUM('Portero', 'Jugador de campo'),
    IN p_id_dia_pago INT,
    IN p_id_cliente INT,
    IN p_foto_alumno VARCHAR(200)
)
BEGIN
    DECLARE edad INT;
    DECLARE id_categoria INT;
    DECLARE new_id_alumno INT;

    -- Insertar el nuevo alumno
    INSERT INTO tb_alumnos(nombre_alumno, apellido_alumno, fecha_nacimiento, posicion_alumno, id_dia_pago, id_cliente, foto_alumno)
    VALUES(p_nombre_alumno, p_apellido_alumno, p_fecha_nacimiento, p_posicion_alumno, p_id_dia_pago, p_id_cliente, p_foto_alumno);

    -- Obtener el ID del nuevo alumno insertado
    SET new_id_alumno = LAST_INSERT_ID();

    -- Calcular la edad del alumno
    SET edad = TIMESTAMPDIFF(YEAR, p_fecha_nacimiento, CURDATE());

    -- Buscar el id_categoria que contenga la edad del alumno
    SELECT sc.id_staff_categorias INTO id_categoria
    FROM tb_staffs_categorias sc
    JOIN tb_categorias_horarios ca ON sc.id_categoria_horario = ca.id_categoria_horario
     JOIN tb_categorias_alumnos cal ON ca.id_categoria_alumno = cal.id_categoria_alumno
    WHERE edad >= cal.edad_minima AND edad <= cal.edad_maxima
    LIMIT 1;

    -- Actualizar el registro del alumno con el id_categoria encontrado
    UPDATE tb_alumnos
    SET id_staff_categorias = id_categoria
    WHERE id_alumno = new_id_alumno;
END//

DELIMITER ;

SELECT * FROM tb_staffs_categorias


DELIMITER //

CREATE PROCEDURE insertar_pago(
    IN p_id_alumno INT
)
BEGIN
    -- Definir variables locales
    DECLARE v_fecha_actual DATE;
    DECLARE v_mes_anterior DATE;
    DECLARE v_cuotas_anuales INT;

    -- Obtener la fecha actual
    SET v_fecha_actual = CURDATE();

    -- Calcular el mes anterior
    SET v_mes_anterior = DATE_SUB(v_fecha_actual, INTERVAL 12 MONTH);

    -- Calcular las cuotas anuales
    SET v_cuotas_anuales = MONTH(v_mes_anterior);

    -- Iniciar la transacción
    START TRANSACTION;

    -- Insertar el pago en la tabla tb_pagos
    INSERT INTO tb_pagos (fecha_pago, cuotas_anuales, cuotas_pendientes, id_alumno)
    VALUES (v_fecha_actual, v_cuotas_anuales, v_cuotas_anuales, p_id_alumno);

    -- Confirmar la transacción
    COMMIT;
END //

DELIMITER ;

-- Procedimiento para calcular la fecha del proximo pago automaticamente

DELIMITER //

CREATE PROCEDURE insertar_detalle_pago(
    IN id_pago_param INT,
    IN descripcion_pago_param VARCHAR(200),
    OUT id_detalle_pago_result INT
)
BEGIN
    DECLARE fecha_pago_actual DATE;
    DECLARE fecha_proximo_pago_calculada DATE;

    -- Obtener la fecha_pago actual del pago correspondiente
    SELECT fecha_pago INTO fecha_pago_actual
    FROM tb_pagos
    WHERE id_pago = id_pago_param;

    -- Calcular la fecha_proximo_pago un mes después de fecha_pago_actual
    SET fecha_proximo_pago_calculada = DATE_ADD(fecha_pago_actual, INTERVAL 1 MONTH);

    -- Insertar el detalle de pago en tb_detalles_pagos
    INSERT INTO tb_detalles_pagos (id_pago, descripcion_pago, fecha_proximo_pago)
    VALUES (id_pago_param, descripcion_pago_param, fecha_proximo_pago_calculada);

    -- Obtener el ID del detalle de pago recién insertado
    SELECT LAST_INSERT_ID() INTO id_detalle_pago_result;
END //

DELIMITER ;

DELIMITER //

CREATE TRIGGER validar_edad_alumno
BEFORE INSERT ON tb_alumnos
FOR EACH ROW
BEGIN
    DECLARE edad_alumno INT;
    SET edad_alumno = TIMESTAMPDIFF(YEAR, NEW.fecha_nacimiento, CURDATE());
    
    IF edad_alumno < 2 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'La fecha de nacimiento del alumno indica que debe tener al menos dos años de edad.';
    END IF;
END //

DELIMITER ;

DELIMITER //

CREATE TRIGGER after_insert_pago
AFTER INSERT ON tb_pagos
FOR EACH ROW
BEGIN
    -- Actualizar el estado del próximo pago a 'Pagado' si la fecha coincide con la fecha de pago actual
    UPDATE tb_detalles_pagos dp
    JOIN tb_pagos p ON dp.id_pago = p.id_pago
    SET dp.estado_proximo_pago = 'Pagado'
    WHERE p.id_alumno = NEW.id_alumno
      AND dp.fecha_proximo_pago = NEW.fecha_pago;
END//

DELIMITER ;


CREATE VIEW vista_dias_pago AS
SELECT 
    id_dia_pago, 
    CONCAT(
        CASE 
            WHEN numero_dias < 2 THEN CONCAT(numero_dias, ' Día') -- Cuando el valor de numero_dias es menor a 2 (es decir que es 1), el texto que sigue al número es Día
            ELSE CONCAT(numero_dias, ' Días') -- Sino, el texto será Días 
        END, 
        ', $', mensualidad_pagar
    ) AS dia_pago
FROM tb_dias_pagos
WHERE mensualidad_pagar > 0;

DELIMITER ;

-- Trigger para actualizar la cantidad de existencias cuando el cliente actualice la cantidad de productos adquiridos.
DELIMITER //
 CREATE TRIGGER trg_update_detalle AFTER UPDATE ON tb_detalles_compras FOR EACH ROW BEGIN

    DECLARE v_existencias_producto INT;

    DECLARE v_cantidad_anterior INT;

    DECLARE v_diferencia INT;



    -- Obtener la cantidad anterior del detalle

    SET v_cantidad_anterior = OLD.cantidad_producto;



    -- Calcular la diferencia entre la cantidad nueva y la anterior

    SET v_diferencia = NEW.cantidad_producto - v_cantidad_anterior;



    -- Obtener las existencias actuales del producto

    SELECT existencias_producto 

    INTO v_existencias_producto

    FROM tb_detalleProducto

    WHERE id_detalle_producto = NEW.id_detalle_producto;



    -- Validar que la nueva cantidad no reduzca las existencias a un número negativo

    IF (v_existencias_producto - v_diferencia) < 0 THEN

        SIGNAL SQLSTATE '45000'

        SET MESSAGE_TEXT = 'No hay suficientes existencias para el producto con ID ';

    ELSE

        -- Actualizar las existencias del producto

        UPDATE tb_detalleProducto

        SET existencias_producto = v_existencias_producto - v_diferencia

        WHERE id_detalle_producto = NEW.id_detalle_producto;

    END IF;

END //
DELIMITER ;

-- Trigger para actualizar la cantidad de existencias de productos cuando el cliente elimine un producto del carrito de compras
DELIMITER //
 CREATE TRIGGER trg_delete_detalle AFTER DELETE ON tb_detalles_compras FOR EACH ROW BEGIN

    DECLARE v_existencias_producto INT;



    -- Obtener las existencias actuales del producto

    SELECT existencias_producto 

    INTO v_existencias_producto

    FROM tb_detalleproducto

    WHERE id_detalle_producto = OLD.id_detalle_producto;



    -- Actualizar las existencias del producto, devolviendo la cantidad eliminada

    UPDATE tb_detalleproducto

    SET existencias_producto = v_existencias_producto + OLD.cantidad_producto

    WHERE id_detalle_producto = OLD.id_detalle_producto;



END //
DELIMITER ;
